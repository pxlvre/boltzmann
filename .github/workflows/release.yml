name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: boltzmann
            asset_name: boltzmann-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: boltzmann
            asset_name: boltzmann-linux-musl-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: boltzmann
            asset_name: boltzmann-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: boltzmann
            asset_name: boltzmann-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: boltzmann
            asset_name: boltzmann-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: boltzmann.exe
            asset_name: boltzmann-windows-amd64.exe

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install cross (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross

      - name: Build for target (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cross build --target ${{ matrix.target }} --release

      - name: Build for target (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --target ${{ matrix.target }} --release

      - name: Prepare binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
            echo "ASSET=../../../${{ matrix.asset_name }}.zip" >> $GITHUB_ENV
          else
            tar czvf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
            echo "ASSET=../../../${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ matrix.asset_name }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_content_type: application/octet-stream

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pxlvre/boltzmann
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max